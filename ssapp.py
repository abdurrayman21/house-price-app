# -*- coding: utf-8 -*-
"""ssapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mhw2vqABc-F7wsG1Bd0HOOUioj3iJRip
"""
# app.py

import streamlit as st
import pandas as pd
import joblib
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

# --- Load model and preprocessor ---
model, preprocessor = joblib.load("house_price_model.pkl")

# --- Page setup & styling ---
st.set_page_config(page_title="House Price Predictor", layout="wide")
st.markdown("""
    <style>
        .main {
            background-color: #f9f9f9;
        }
        h1 {
            color: #2c3e50;
        }
        .stButton>button {
            background: linear-gradient(to right, #ff416c, #ff4b2b);
            color: white;
            border-radius: 5px;
        }
        .stTabs [data-baseweb="tab-list"] {
            justify-content: center;
        }
    </style>
""", unsafe_allow_html=True)

# --- Tabs layout ---
tab1, tab2, tab3 = st.tabs(["üè† Prediction", "üìä Visualizations", "üßæ About"])

# ---------------------------------------------------------------------------------
# üè† TAB 1: Prediction Interface
# ---------------------------------------------------------------------------------
with tab1:
    st.title("üè† House Price Prediction")
    st.markdown("Use the form to enter house features and estimate the selling price.")

    with st.form("prediction_form"):
        st.header("Property Details")

        col1, col2, col3 = st.columns(3)

        with col1:
            MSSubClass = st.selectbox("MSSubClass", [20, 30, 40, 50, 60, 70, 80, 90, 120, 160, 180, 190])
            OverallQual = st.slider("Overall Quality", 1, 10, 5)
            GarageCars = st.slider("Garage Cars", 0, 4, 2)
            KitchenQual = st.selectbox("Kitchen Quality", ['Ex', 'Gd', 'TA', 'Fa', 'Po'])
            Fireplaces = st.slider("Fireplaces", 0, 4, 1)

        with col2:
            GrLivArea = st.number_input("Living Area (Sq Ft)", 500, 10000, 1500)
            TotalBsmtSF = st.number_input("Total Basement SF", 0, 3000, 1000)
            YearBuilt = st.slider("Year Built", 1870, 2023, 2000)
            BsmtQual = st.selectbox("Basement Quality", ['Ex', 'Gd', 'TA', 'Fa', 'Po', 'NA'])
            FullBath = st.slider("Full Bathrooms", 0, 5, 2)

        with col3:
            BedroomAbvGr = st.slider("Bedrooms Above Ground", 0, 10, 3)
            KitchenAbvGr = st.slider("Kitchens Above Ground", 0, 5, 1)
            LotArea = st.number_input("Lot Area", 1000, 20000, 7500)
            Neighborhood = st.selectbox("Neighborhood", [
                'NAmes', 'CollgCr', 'OldTown', 'Edwards', 'Somerst', 'NridgHt',
                'Sawyer', 'Mitchel', 'Crawfor', 'Timber', 'IDOTRR', 'StoneBr',
                'BrkSide', 'Gilbert', 'NWAmes', 'ClearCr', 'Blmngtn', 'SWISU',
                'MeadowV', 'BrDale', 'NPkVill', 'Blueste', 'Veenker'])
            SaleCondition = st.selectbox("Sale Condition", ['Normal', 'Abnorml', 'Partial', 'AdjLand', 'Alloca', 'Family'])

        submitted = st.form_submit_button("Estimate Price")

        if submitted:
            input_data = pd.DataFrame([{
                "MSSubClass": MSSubClass, "OverallQual": OverallQual, "GarageCars": GarageCars,
                "KitchenQual": KitchenQual, "Fireplaces": Fireplaces, "GrLivArea": GrLivArea,
                "TotalBsmtSF": TotalBsmtSF, "YearBuilt": YearBuilt, "BsmtQual": BsmtQual,
                "FullBath": FullBath, "BedroomAbvGr": BedroomAbvGr, "KitchenAbvGr": KitchenAbvGr,
                "LotArea": LotArea, "Neighborhood": Neighborhood, "SaleCondition": SaleCondition
            }])

            try:
                transformed = preprocessor.transform(input_data)
                prediction = model.predict(transformed)[0]
                st.success(f"üè° Estimated House Price: ${prediction:,.2f}")
            except Exception as e:
                st.error(f"Prediction failed: {e}")

# ---------------------------------------------------------------------------------
# üìä TAB 2: Visualizations
# ---------------------------------------------------------------------------------
with tab2:
    st.header("üìä Market Insights")

    @st.cache_data
    def load_sample_data():
        return pd.read_csv("https://raw.githubusercontent.com/selva86/datasets/master/AmesHousing.csv")

    try:
        df = load_sample_data()

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Sale Price Distribution")
            fig1 = px.histogram(df, x="SalePrice", nbins=40, title="Sale Price Distribution", color_discrete_sequence=["indianred"])
            st.plotly_chart(fig1, use_container_width=True)

            st.subheader("Living Area vs Sale Price")
            fig2 = px.scatter(df, x="GrLivArea", y="SalePrice", color="OverallQual",
                              title="GrLivArea vs SalePrice", hover_data=["YearBuilt"])
            st.plotly_chart(fig2, use_container_width=True)

        with col2:
            st.subheader("Sale Price by Year Built")
            fig3 = px.box(df, x="YearBuilt", y="SalePrice", points="all", title="Year Built vs Sale Price")
            st.plotly_chart(fig3, use_container_width=True)

            st.subheader("Top Feature Correlations")
            top_corr = df.corr(numeric_only=True)['SalePrice'].abs().sort_values(ascending=False).head(10).index
            fig4, ax = plt.subplots(figsize=(8, 5))
            sns.heatmap(df[top_corr].corr(), annot=True, cmap="coolwarm", ax=ax)
            st.pyplot(fig4)

    except Exception as e:
        st.warning("Could not load visualization data.")

# ---------------------------------------------------------------------------------
# üßæ TAB 3: About
# ---------------------------------------------------------------------------------
with tab3:
    st.header("üßæ About This Project")
    st.markdown("""
    **House Price Prediction Dashboard**

    This app was developed as part of a Final Year Project to predict house prices using machine learning techniques.
    
    **Features**:
    - Uses a trained regression model with preprocessing pipeline
    - Accepts 70+ house attributes
    - Predicts real estate prices interactively
    - Includes visual analytics powered by Plotly and Seaborn

    **Developed By**: Mehtab  
    **Tools**: Streamlit, Scikit-learn, Pandas, Plotly, Seaborn
    """)


